package myctapp;import java.awt.image.*;import java.awt.color.ColorSpace;import java.awt.geom.AffineTransform;   public class ImageOps  {        public static BufferedImageOp thresholdOp(int low, int high) {        byte threshold[] = new byte[256];        for (int j = 0; j < 256 ; j++) {            if (j > high) {                threshold[j] = (byte) 255;            } else if (j < low) {                threshold[j] = (byte) 0;            } else {                threshold[j] = (byte) j;            }        }        BufferedImageOp Op = new LookupOp            (new ByteLookupTable(0,threshold), null);         return Op;    }         public static ConvolveOp blurOp(){        float ninth = 1.0f / 9.0f;	float[] blurKernel = {	    ninth, ninth, ninth,	    ninth, ninth, ninth,	    ninth, ninth, ninth,	};        ConvolveOp Op = new ConvolveOp            (new Kernel(3, 3, blurKernel));        return Op;    }        public static ConvolveOp sharpenOp(){    	// Sharpening	float[] sharpKernel = {	    0.0f, -1.0f, 0.0f,	    -1.0f, 5.0f, -1.0f,	    0.0f, -1.0f, 0.0f	};        ConvolveOp Op = new ConvolveOp(	    new Kernel(3, 3, sharpKernel),	    ConvolveOp.EDGE_NO_OP, null);         return Op;    }    public static ConvolveOp edgeOp(){    	float[] edgeKernel = {	    0.0f, -1.0f, 0.0f,	    -1.0f, 4.0f, -1.0f,	    0.0f, -1.0f, 0.0f	};        ConvolveOp Op = new ConvolveOp( new Kernel(3, 3, edgeKernel));        return Op;    }            public static BufferedImageOp invertOp(){                byte[] invert = new byte[256];             for (int i = 0; i < 256; i++) {                invert[i] = (byte)(255 - i);        }                BufferedImageOp Op = new LookupOp(                new ByteLookupTable(0, invert), null);        return Op;    }        public static BufferedImageOp rescaleOp(float scaleFactor){        BufferedImageOp Op;                //float scaleFactor = 1.2f;        Op = new RescaleOp(scaleFactor, 0, null);        return Op;    }             public static BufferedImageOp colorconvertOp(){        BufferedImageOp Op;                // convert to greyscale        ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);                Op = new ColorConvertOp(cs, null);        return Op;    }         public static BufferedImageOp zoomOp(double multiple){         BufferedImageOp Op;            Op = new AffineTransformOp(         AffineTransform.getScaleInstance(multiple,                 multiple), AffineTransformOp.TYPE_BILINEAR);        return Op;    }      }